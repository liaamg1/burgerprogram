-------------------------------------------------------
Engineering Diary – Burger Project

*** Project Overview ***

-------------------------------------------------------

** Introduction **

Team Members: Ritvars Birovs, Hugo Jismark, Liam Gustafsson, Levin Bandrez, Måns Bäckström

In this project, we worked as a team to develop a simple "burger" application. We used GitHub as our version control system, allowing us to collaborate effectively and keep track of our code. Our goal was to gain practical experience with Git and GitHub while learning how to work together in a development environment.

-------------------------------------------------------

** Objective **

The goal of the project was to gain a deeper understanding of collaboration and version control in software development. By working with GitHub, we learned how to handle repositories, commit, push, pull, and merge processes. We also used various programming languages and focused on code quality, teamwork, and communication.

-------------------------------------------------------

** Workflow **

1. Create a repository
We started the project by creating a repository on GitHub. One of the team members took responsibility for this and invited the other members. We used a branch strategy where we created separate branches for each function to avoid merge conflicts.

2. Planning and collaboration
We began by discussing the project structure and which features were the most important to implement first. Using OneNote, we divided tasks among us and made sure everyone had clear roles. Communication took place via Snapchat/Discord, where we kept each other updated on what we were working on and helped out if anyone encountered problems.

3. Implementation and coding
We divided the coding work into different modules, where one person was responsible for setting up a container with the files app.py and kitchen.py. Each coder worked on their own branch, and when a feature was completed, a pull request was made for code review before the code was merged into the main branch. To maintain high code quality, we followed uniform code standards, such as PEP8 for Python.

After each commit, we double-checked if the code worked well with our "stable" code base, and if it didn’t, we didn’t merge the commit and rewrote the code. This was done to avoid creating new problems and confusion. Not every commit was used if something didn’t work, but each working commit was merged into the code, and we continued development.

4. Configuration management
To keep our development environment consistent, we used a requirements.txt file where we defined all dependencies. We also used a Dockerfile to set up a containerized environment where the application could run the same way for all developers and run both files simultaneously. Due to MySQL and SQLite and Docker database not being compatible with our code we decided to change to PostgreSQL which worked correctly with our code. 

5. Testing and debugging
During coding, we encountered several bugs, so we used Visual Studio Code’s built-in debugging tools to track down issues. We also added unit tests for certain functions to ensure they worked as expected.

We added debugging tests for specific functions within app.py and the database to check what values appeared and what was missing. Unit tests were used to test whether certain functions, such as "get_db_connection" and "get_burgers", worked as intended. We found that our first two attempts to fix "get_db_connection" didn’t work because we needed to investigate the issue further and figure out how to solve it. We debugged the list where the burgers were stored after being ordered and discovered that no orders were being saved at all. We quickly fixed the issue to make it work. In app.py, we checked whether the routes worked, which they did, so we could use HTML files instead of writing HTML code directly within app.py to make it more readable and understandable.

It would have been beneficial if we had implemented more test-driven development from the beginning, as this would have helped us find bugs earlier that later appeared during coding.

6. Final code and delivery
After completing debugging and testing, we were able to finalize the project. Everyone on the team contributed to the final polishing, and we made sure each function was tested and worked as expected. Pull requests and code reviews were crucial in ensuring the quality was high.

-------------------------------------------------------

** Reflections and Conclusions **

* Challenges *
This project required good communication and careful handling of commits to ensure that no code was lost or overwritten. It was a difficult start since we weren’t sure how to set everything up, but after some thought, things moved forward quickly and according to plan.

* Learnings *
We learned the importance of having clear commit messages and making regular pushes to GitHub to avoid large, difficult-to-handle conflicts. We also realized the value of working on separate branches and using pull requests to review and improve each other’s code. Additionally, we learned the great importance of communication and collaboration to move the project forward since we needed to rely on and help each other.

* Suggestions for Improvement *
In future projects, it would be beneficial to introduce a code review process earlier and use more automated tests to catch bugs. We could have also improved our communication by regularly talking and writing about what had happened and been coded.

Through this project, we gained a deeper understanding of version control and collaboration in software development. Using GitHub and Git enabled us to effectively manage code while working in parallel without disrupting each other.

-------------------------------------------------------

* My Commits and What I Contributed* 

I participated in both the coding and the planning, where I created our roles and set up the planning in OneNote. I made a few commits where I created the base code we worked from and attempted to connect kitchen.py to app.py and connect the database to the app after it was created. I also helped my team members when they encountered problems or had questions.
I started with the base code having both python and HTML code inside of app.py just to make a base-code to go from and later due to many problems we encountered during debugging Måns and Liam decided to split up HTML and Python to make the code more readable and easier to work with. I started off by doing loads of commits to give the group a good start but we shortly decided to change the base code and work from there due to the complexity from having both python and HTML code in one file. During the end i mostly helped out with ideas and research for the group so they could implement their code and also after the code was done, i did my best checking the code for small errors and also did the commenting throughout the code. I checked for pep8 standard stuff such as too long lines or Naming Conventions etc.
I helped with both Backend and Frontend so i learnt the important parts of both sides.

Some areas i used:

HTML - I had some prior experience from school which i helped out with and did my best help out liam on creating the HTML files and code. HTML is our user-interface (GUI) where the user can order and see everything.

API - I had some prior experience from school about working with API, but i still needed loads of research to contribute to the project and help out as much as possible in that area.

Docker - I had zero experience with docker so a lot of research went into understanding what docker is and how to use it. And how to create a isolated development environment.

Database - I had some prior experience from school, so i did my best to use different types of databases such as MySQL and SQLite to make the order program to work, however due to problems with the connection we decided to use PostgreSQL where i had to research a lot to be as useful to the team as possible.

I learned how to work more within a team and how to structure planning, as well as how to work with containers and databases.
