Testing and Debugging

Identifying Functionality
Modules to test:

App: API endpoints for retrieving various burgers
API endpoint for submitting orders
Functions for handling order customizations
Database API for retrieving and storing product information
Kitchen View: API endpoint for receiving and displaying orders
Testing Methods
Tests to perform:

Unit Tests: Test each module to ensure they return correct values.
Example: When a user requests to order a burger, the API should return a list of available burgers.
Integration Tests: Test the flow between modules from App to Kitchen View.
Example: When an order is submitted, it should appear in Kitchen View with the correct information.
Error Handling Tests: Simulate incorrect inputs and ensure the system handles them correctly.
Example: What happens if a user tries to order a non-existent item?
Test Runs

Regular Testing: Run tests after each major functional change to ensure nothing breaks.
Conducted cross-browser testing to verify that the website functions correctly on different browsers.
Run tests when making commits to check that no new bugs arise.
When Tests Fail: When encountering issues, we discussed the error within the team to find solutions that address the problem.
This plan provides a good overview of how we structured our tests to ensure our application is robust and functions as intended!
During our testing process, we focused on carefully debugging specific parts of our code. One key aspect was checking the communication between app.py and kitchen.py. In kitchen.py, we implemented a response for "Order received" that would be triggered when app.py sent information. To carry out the tests, we created temporary burgers, allowing us to simulate orders despite previous issues with the database.

We continued to work on the code until we eventually received a correct response. During this process, we encountered several issues. A specific example was when we mistakenly specified POST in app.py instead of GET for kitchen.py. This incorrect method led to information not being sent or received correctly, breaking the communication between the two files. By identifying and correcting this mistake, we restored the intended functionality and ensured that kitchen.py received the information as intended. This example highlights the importance of debugging in solving problems and improving code functionality.

We also conducted similar tests for the SQL database. To ensure the database could communicate correctly with the code, we implemented a print function. This helped us determine whether the issue lay with the database or in the communication between the database and the code. We discovered that the code was correct, but the connection to the local Docker MySQL database was not functioning as intended. After careful consideration, we decided to switch to PostgreSQL. Following this change, everything worked as it should, after some adjustments.

By carefully testing and troubleshooting each step, we have ensured that our system now functions as intended.
Denna dokumentation beskriver testerna som genomförts för Flask-baserade burgerapplikationen. Tester har designats för att säkerställa att olika rutter och funktioner fungerar som förväntat. Tester utförs med hjälp av pytest och mock-objekt för att simulera beteendet hos externa komponenter.

What is Tested in test_app.py
Frontpage Route: Tests that the frontpage route returns a status code 200.
Burger Route: Tests that the /order route correctly returns a list of burgers.
Order Submission: Tests that the /send-order route receives an order and returns the correct response.
How Tests Are Conducted
Tests utilize the pytest framework along with unittest.mock to create mock objects:

Frontpage: A GET request is made to the root route / to ensure that the application responds correctly.
Burgers: Mock data for burgers is used to simulate a database query. A GET request is made to /order, and the response is verified to contain accurate information about the burgers.
Order Submission: A POST request is made to /send-order with mock data. Tests check that the correct message is returned from the mocked external calls.

Tests and Results
Tests
test_frontpage:

Purpose: Tests that the frontpage route returns a status code 200.
Result: Passed.

test_display_burgers:

Purpose: Tests that the /order route returns a list of burgers.
Result: Passed. Confirms that the mocked burgers are included in the response.

test_send_order:

Purpose: Tests that the /send-order route receives and returns the correct response.
Result: Passed. Confirms that the message "Order received!" is returned correctly.
Summary of Results
All tests passed without errors. The tests confirm that the key functionalities of the burger application work correctly and that the data is handled properly.

These results provide a solid foundation for continuing the development of the application and can be used as a reference for future tests and features.

NY TILLAGD TEXT FÖR KOMPLETTERING:
________________________________________
Unit Testing Summary
Unit tests have been written to validate the functionality of the burger ordering application, covering both the front-end and kitchen management systems. These tests ensure that critical routes and operations work as intended, providing a reliable foundation for the application.

Front-End Tests
Test for Front Page:

The test_frontpage function verifies that the front page route returns a status code of 200, indicating that the page is accessible.
Test for Displaying Burgers:

The test_display_burgers function checks the /order route to ensure it returns a list of burgers. By using mocking, the test simulates the get_burgers function to return a predefined list of burgers. It confirms that the response status is 200 and that the burger names are correctly included in the response data.
Test for Sending Orders:

The test_send_order function tests the /send-order route to verify that it correctly receives and processes an order. By mocking the external requests.post call, the test ensures that the response from the kitchen service is handled properly. It checks for a 200 status code and validates the returned message, confirming that the order was successfully received.
Results: All front-end tests passed successfully, indicating that the implemented features function as intended. This robust testing framework helps ensure the reliability of the application and supports ongoing development by catching potential issues early.

Kitchen Management Tests
Test for Front Page:

The test_index function checks that the front page route returns a status code of 200, confirming that the page is accessible.
Test for Receiving Orders:

The test_receive_order function tests the /receive-order route to ensure it successfully receives and saves an order. The test sends a JSON payload representing a burger order and verifies that:
The response status is 200.
The response message confirms the order was received.
The order is correctly saved in the application’s orders list, checking both the burger name and any special wishes.
Test for Displaying Orders:

The test_display_orders function verifies that the /display-orders route correctly displays all received orders. After posting a sample order, the test checks that:
The response status is 200.
The response data contains the details of the order, ensuring that the correct burger name and special wishes are displayed.
Results: All kitchen management tests passed successfully, demonstrating that the system works as expected. These tests confirm that orders are received, stored, and displayed accurately.

Conclusion
The unit tests for both the front-end and kitchen modules provide confidence in the reliability and functionality of the burger ordering application. As the system evolves, these tests will be instrumental in identifying and addressing issues early in the development process, ultimately enhancing user experience and system robustness.

