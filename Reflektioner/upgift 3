------------------------------------------------------
*** Test och debuggning ***


** Identifiera Funktionalitet ** 
Moduler att testa: App: API-ändpunkter för att hämta de olika burgarna 
API-ändpunkt för att skicka beställningar Funktioner för att hantera anpassningar av beställningar App. 
Databasens API för att hämta och lagra varuinformation KitchenView. 
API-ändpunkt för att ta emot och visa beställningar 

------------------------------------------------------

** Testmetoder **
Tester att utföra: Enhetstester: Testa varje modul för att säkerställa att de returnerar korrekta värden. 
Exempel: När en användare begär att beställa en hamburgare, bör API returnera en lista med tillgängliga hamburgare. 
Integrationstester: Testa flödet mellan moduler från App till KitchenView. Exempel: När en beställning skickas, ska den dyka upp i KitchenView med korrekt information. 
Felhanteringstester: Simulera felaktiga indata och se till att systemet hanterar dem korrekt. Exempel: Vad händer om en användare försöker beställa en icke-existerande vara? 

------------------------------------------------------


** Testkörningar **
Regelbunden testning: Kör testerna efter varje större funktionell ändring för att säkerställa att ingenting bryts. 
Gjort cross-Browser test för att kontrollera hemsidan funktioner även fungerar på olika webbläsare. 
Kört tester vi när vi gör comits för att se att inga nya buggar uppstår. 
Vid testmisslyckande: När vi har fått problem så har diskuterat felet i teamet för att hitta lösningar som åtgärdar problemet. 
Den här planen ger en bra översikt för hur vi strukturerat våra tester för att säkerställa att vår applikation är robust och fungerar som den ska!

Under vår testningsprocess har vi fokuserat på att noggrant debugga specifika delar av vår kod. Ett av de centrala momenten var att kontrollera kommunikationen mellan app.py och kitchen.py. I kitchen.py implementerade vi en respons för "Order received" som skulle aktiveras när app.py skickade information. För att kunna genomföra testerna hade vi skapat temporära hamburgare, vilket gjorde det möjligt att simulera beställningar trots tidigare problem med databasen.

Vi fortsatte att arbeta med koden tills vi till slut fick en korrekt respons. Under denna process stötte vi på flera problem. Ett konkret exempel var när vi av misstag angav POST i app.py istället för GET för kitchen.py. Denna felaktiga metod ledde till att informationen inte kunde skickas eller tas emot korrekt, vilket bröt kommunikationen mellan de två filerna. Genom att identifiera och korrigera denna felaktighet återfick vi rätt funktionalitet och säkerställde att kitchen.py mottog informationen som avsett. Detta exempel understryker hur viktigt debugging är för att lösa problem och förbättra kodens funktionalitet.

Vi har även genomfört liknande tester för SQL-databasen. För att säkerställa att databasen kunde kommunicera korrekt med koden implementerade vi en print-funktion. Detta hjälpte oss att avgöra om problemet låg i databasen eller i kommunikationen mellan databasen och koden. Vi upptäckte att koden var korrekt, men att kopplingen till den lokala Docker-databasen MySQL inte fungerade som avsett. Efter noggrant övervägande beslutade vi oss för att byta till PostgreSQL. Därefter fungerade allt som det skulle, efter lite om och men.

Genom att noggrant testa och felsöka varje steg har vi säkerställt att vårt system nu fungerar som det ska.
------------------------------------------------------



