Implementation and Documentation

Project Overview
The project involves building a simple restaurant ordering system where users can select and order burgers, while the kitchen can view and manage these orders. The system is divided into two containers:

Burger Order: Manages the customer interface and orders.
Kitchen View: Displays current orders to the kitchen.
By using Flask as the web framework and a PostgreSQL database for data storage, we aim for a smooth and interactive user experience.
Burger Order
The Burger Order container is responsible for displaying available burgers and receiving orders from customers. In this module, we have created routes to display burgers and accept orders via a POST request. It also retrieves burger data from a database. Here, we have implemented a method to add and remove ingredients, giving customers the flexibility to customize their orders.

Kitchen View
The Kitchen View container aims to provide kitchen staff with an overview of incoming orders. This module contains routes to receive orders and display current orders. With the help of Flask rendering, kitchen staff can easily view and manage orders in real-time. We have also implemented a responsive layout to ensure that information is presented clearly and understandably.

Each Module

app.py (Burger Order): The main module that handles all customer interactions, including retrieving burgers from the database and sending orders to the kitchen. Here, we also validate orders and communicate with the kitchen.
burger_data.py: This module is responsible for interacting with the database, including creating, reading, and updating burger data. It also contains logic to ensure that only available burgers are displayed to customers.
kitchen.py (Kitchen View): This module manages the logic for the kitchen interface, including receiving and displaying orders. It ensures that the kitchen is informed about new orders and enables an efficient workflow.
HTML Files: These files contain the interface for both customers and kitchen staff. Each HTML file is designed to present relevant information in a user-friendly manner, using Flask templates for dynamic content.
Experiences from Implementation

What Went Well?
All team members actively contributed, making it easier to maintain focus and maintaining our teamwork.

What Went Less Well?
Some features took longer to implement than expected, leading to adjustments in our timeline. 
As example the database and docker-compose working togheter and on their own, this took much longer time than expected.

How Did We Solve Difficulties?
Regular meetings to discuss progress and obstacles helped us identify problems early and keep the project on track.

What Did We Not Manage to Solve?
We did not have enough time to implement all desired features, but we prioritized the most critical ones.

