---------------------------------------------------------------
EngineerDiary – Burgerproject
ProjectOverview

Introduction:
Teammembers: Ritvars Birovs, Hugo Jismark, Liam Gustafsson, Levin Bandrez, Måns Bäckström

2024-09-20:
Today i have created a simple project
EXECUTED:
•	Python installed
•	Flask installed
•	VS CODE will be my text editor, also used in other courses
•	Tried to enter localhost:5000, with the simple message of: (“<h1>”Hello World</h1>”)
Approximately: 3 hours work
Until next time:
Next time I want to enter localhost:5000, I am not sure what the issue is of right now I might try to use another text editor,
Collaboration:
Our group has had multiple sessions debating on how to get started on the project and what tools to use. Example of these
tools are JavaScript, Node, HTML, and Flask. Flask was our pick when the teacher said we could use it and created a example
using Flask. Our group tried to create seperate branches for Configure management but it didn't work out for us so we decided to 
commit into the main branch when commiting a change.
 
2024-10-13
The problems from last update: 
The problems from last update were easily fixed with:  if __name__ == '__main__':
Since the last update I have gotten a light understanding of Docker, html, Jinja2, SQLAlchemy, MySQL, API, GUI, DATABAS, GIT and GITHUB.
EXECUTED:
•	Docker installed
•	MySQL installed
•	GIT installed
•	SQLAlchemy installed
•   Jinja2 installed
I have learnt that there are multiple SQL,s you can use and our group has tried MySQL, SQLAlchemy and SQLlite3
Git commands:
Get started with git:
git config --global user.name "Your Name"
git config --global user.email "you@youraddress.com"
git config --global push.default matching
git config --global alias.co checkout
git init
touch .gitignore ( creates a file that ignores unnecessary data when you commit)
Commit with git:
git add . (adds everything from your project in your current file position)
git commit -am ‘comment’
Approximately 16 hours work
Collaboration:
We have decided upon using Flask, Jinja2, HTML 

2024-10-14
Since the last update we have decided that our current solution to writing code was to hard to understand, the problem was that the HTML code
was written with our Python code. To fix this i created a folder called templates and to access this code you just have to
add render_templates in the beginning. This way it was easier for our group to write code. In the folder templates html
files will be kept. 
EXECUTED:
•   added render_templates
•   added folder (templates) 
•   HTML file index was added, INDEX gives a simple Introduction to localhost:5000
Approximately 12 hours work
Until next time:
We are having issues with the SQL, many hours go to watching informational videos that allow us to have a proper 
database. At this moment we use SQLlite3 and we are having issues with it.

2024-10-15
Today our group spoke with the teacher about our usage of SQLlite3, he couldn't help us because he didn't understand
SQLlite3 wich prompted us to switch to MySQL. Me and Liam worked on the MySQL, after what felt like one billion
Error messages, Liam got it to work on his machine however for some reason i get Error
mysql.connector.errors.NotSupportedError: Authentication plugin 'caching_sha2_password' is not supported
I created custom error messages for Invalid URL and Internal Server Error,
they make use of HTML to write out a Error code.
EXECUTED
•   MySQL-Workbench installed
•   404.html, Invalid URL
•   500.html, Internal Server Error
Approximately 11 hours work
Until next time:
when i ran mysql --version, wich made me aware that it couldn't find path so i tried to go directly into path
by entering Program Files but i couldn't enter.

2024-10-16
Problem since last update: to enter the Program Files I just put "Program Files", once entered I found MySQL 
and did the command 'mysql --version', it did find the files but the Error:
mysql.connector.errors.NotSupportedError: Authentication plugin 'caching_sha2_password' is not supported
still popped up. I believe the Error has to do something with mysql-connector. I tried to fix this issue 
by installing and uninstalling, mysql-connector, mysql-connector-python and mysql-connector-python rf.
I tried to use them all individually and in diffrent orders but i could not get rid of Error: 
mysql.connector.errors.NotSupportedError: Authentication plugin 'caching_sha2_password' is not supported.
I do understand that the problem is the SQL because when getting this error i have limited operations to just
the database itself. But this did not work for me and we decided to use postgreSQL instead of MySQL.
EXECUTED:
•   psycopg2 installed
Approximately 8 hours work
psycopg2 solved Error:
mysql.connector.errors.NotSupportedError: Authentication plugin 'caching_sha2_password' is not supported

Lastly

Reflections and Opportunities for Improvement:
This task feels very easy to do until you try to do something. This is a iceberg task because with every minor change
100 videos have to follow. If we did it all again THE priority would be to set up Git wich we did. And secondly 
making sure the structure works before writing a bunch of code wich we could have done better.

--------------
Komplettering:
1. Selected function to debugg
I chose to test the function; 'def receive_order' in kitchen.py. 
I had to temporarily add a dictionary with burgers instead of using the database, as the database doesn't run when debugging.

2. Setting breakpoints
I set breakpoints in the following parts of the code (in kitchen.py):
variable: 'order'; order is a empty list that will eventually append the values from burger_name and special_wishes.

variable: 'burger_name'; burger_name uses the get command to access order_data with the key 'name', when doing so it
will access my temporarily constructed dictionary in order_data and get a value

variable: 'special_wishes'; special_wishes uses the get command to access order_data with the key 'wishes', when doing so it
will access my temporarily constructed dictionary in order_data and get a value

variable: 'order_data'; order_data is the variable that usually recieve the rest call from the API, this information 
contains names of the burgers and the wishes the user has added when ordering. Considering the API can't access
the database I added a dictionary to order_data instead of its original use.

3. Monitoring variables
Monitering the variables was frustrating and exciting because when you put variables on 'WATCH' in the run and debugg 
feature you can actively see the variables change. It's exciting when they aquire a value and frustrating when they don't.
'order' always had a value because it was given the value empty list ([]) in the very beginning of kitchen.py. 'order' is 
empty because it is expected to retrieve values further down the code. These values come from the variables 
burger_name and special_wishes wich i also had on watch. The reasoning for having these variables on watch is because
I wanted to make sure their keys weren't misspelled or something other that would restrict these variables from retrieving
the values from the temporarily constructed dictionary, 'order_data'. 

When I had fully ran the program using the debugg feature 'order' had 'get' its values and was now visable on localhost.

4. Trial and error
I had never used breakpoints before so when starting out I was just playing around with it. I did so by creating simple code,
for example a=200, b=33, b>a and b<a. This is how I started to see how the test and debugg feature reacts to right and
wrongs. And this is also how I learnt how to use the WATCH feature. When I felt ready I entered our group project
to try it out.

It didn't take long before I ran into a problem, infact it happend right away. When trying to debugg kitchen.py it couldn't 
find path but after using all my brain power I realised I was in the wrong environment in the debugger used for this project
(launch.json). This was because Liam had created this debugger the day prior for his use and when I tried to use it, it wouldn't
work because Liam used it in containers/burgerorder/app.py meanwhile I wanted to use it in containers/kitchenview/kitchen.py.

Now I was ready to debugg and after issues with order_data and how to best use it I decided to create a temporary dictionary.
Bassicly it is what the REST API CALL would send over in docker-compose. This way I limit the testing to the KitchenView 
folder. This allows me to test 'def recieve_order' and to see how it's variables operate actively and then to finnaly see
the end result that I wanted wich was to view the value in localhost.

5. Summary and reflection
I did achieve my goal with my debugg session. I could have spent less time if I had the correct path right away and didn't
bother with the functions from other files. Even though it was frustrating not having these work for me I can now confidently
say that in retrospect I don't mind spending the extra time figuring out these problems because of how I have learnt from
trial and error.
